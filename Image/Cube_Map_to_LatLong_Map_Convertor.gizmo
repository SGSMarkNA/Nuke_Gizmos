#! C:/Program Files/Nuke9.0v7/nuke-9.0.7.dll -nx
version 9.0 v7
Gizmo {
 inputs 0
 addUserKnob {20 User}
 addUserKnob {41 file l "Cube Map: " t "Select a cross-shaped Cube Map image to be converted to a Lat Long format image.\n\nNote: Attach a Write node to the output and render to file. Normally, you should choose either the HDR or EXR formats to preserve color dynamic range." T Read_CubeMap.file}
 addUserKnob {26 ""}
 addUserKnob {41 Recalculate l "PRESS to generate LatLong Map" t "After selecting a Cube Map image, press this to set the cube face size and output LatLong map image." T Recalculate_Output_Size.Recalculate}
}
 BackdropNode {
  inputs 0
  name Cube_Map_Format_Image
  tile_color 0x71c67100
  label Cube_Map_Format_Image
  note_font_size 30
  xpos -650
  ypos -261
  bdwidth 402
  bdheight 179
 }
 Read {
  inputs 0
  format "14140 10605 0 0 14140 10605 1 "
  origset true
  name Read_CubeMap
  xpos -508
  ypos -182
 }
 Assert {
  expression {{"\[python nuke.toNode(\\\"Read_CubeMap\\\").width()%4\\ ==\\ 0]"}}
  message "Image width must be multiple of 4."
  name Image_Width_Check
  xpos -508
  ypos -41
 }
set N58543800 [stack 0]
 Crop {
  box {{Get_Read_Size.Cube_Width} {Get_Read_Size.Cube_Width*3} {Get_Read_Size.Cube_Width*2} {Get_Read_Size.Cube_Width*2}}
  reformat true
  crop false
  name plusY
  xpos -575
  ypos 107
 }
push $N58543800
 Crop {
  box {{Get_Read_Size.Cube_Width} {Get_Read_Size.Cube_Width} {Get_Read_Size.Cube_Width*2} 0}
  reformat true
  crop false
  name minusY
  xpos -445
  ypos 107
 }
push $N58543800
 Crop {
  box {{Get_Read_Size.Cube_Width*2} {Get_Read_Size.Cube_Width} {Get_Read_Size.Cube_Width*3} {Get_Read_Size.Cube_Width*2}}
  reformat true
  crop false
  name plusX
  xpos -830
  ypos 107
 }
push $N58543800
 Crop {
  box {0 {Get_Read_Size.Cube_Width*2} {Get_Read_Size.Cube_Width} {Get_Read_Size.Cube_Width}}
  reformat true
  crop false
  name minusX
  xpos -701
  ypos 107
 }
push $N58543800
 Crop {
  box {{Get_Read_Size.Cube_Width*3} {Get_Read_Size.Cube_Width*2} {Get_Read_Size.Cube_Width*4} {Get_Read_Size.Cube_Width}}
  reformat true
  crop false
  name plusZ
  xpos -312
  ypos 107
 }
push $N58543800
 Crop {
  box {{Get_Read_Size.Cube_Width} {Get_Read_Size.Cube_Width*2} {Get_Read_Size.Cube_Width*2} {Get_Read_Size.Cube_Width}}
  reformat true
  crop false
  name minusZ
  xpos -171
  ypos 107
 }
 SphericalTransform {
  inputs 6
  input Cube
  format "14140 7070 0 0 14140 7070 1 LatLongMap_Output"
  fix true
  name SphericalTransform1
  xpos -508
  ypos 280
 }
 Output {
  name Output1
  xpos -508
  ypos 405
 }
 NoOp {
  inputs 0
  name Get_Read_Size
  xpos -250
  ypos -26
  addUserKnob {20 User}
  addUserKnob {14 Read_Size R 0 100}
  Read_Size {{"\[python -execlocal ret\\ =\\ nuke.toNode(\\\"Read_CubeMap\\\").width()]"} {"\[python -execlocal ret\\ =\\ nuke.toNode(\\\"Read_CubeMap\\\").height()]"}}
  addUserKnob {3 Cube_Width}
  Cube_Width {{"\[python -execlocal read_size\\ =\\ nuke.toNode(\\\"Get_Read_Size\\\").knob(\\\"Read_Size\\\")\\ncubeface_width,\\ cubeface_height\\ =\\ read_size.value()\\nret=(cubeface_width/4)]"}}
 }
 NoOp {
  inputs 0
  name Recalculate_Output_Size
  selected true
  xpos -87
  ypos -27
  addUserKnob {20 User}
  addUserKnob {22 Recalculate T "read_size_knob = nuke.toNode(\"Get_Read_Size\").knob(\"Read_Size\")\nread_width, read_height = read_size_knob.getValue()\n\nSphericalTransform_knob = nuke.toNode(\"SphericalTransform1\").knob(\"format\")\n\nformat_list_objects = nuke.formats()\nformat_list = \[]\n\nfor f in format_list_objects:\n    name = f.name()\n    format_list.append(name)\n\nif \"LatLongMap_Output\" not in format_list:\n    f = nuke.addFormat(\"%i %i LatLongMap_Output\" % (read_width, int(read_width/2)))\n    SphericalTransform_knob.setValue(f)\nelse:\n    for f in format_list_objects:\n        name = f.name()\n        if name == \"LatLongMap_Output\":\n            f.setWidth(int(read_width))\n            f.setHeight(int(read_width/2))\n            SphericalTransform_knob.setValue(f)\n            break" +STARTLINE}
 }
end_group
